version: "3.4"
services:
  jackett:
    container_name: jackett
    image: linuxserver/jackett:latest
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${MEDIA_DOWNLOADS}/torrent-blackhole:/downloads
      - ${CONTAINER_CONFIGS}/jackett:/config
    networks:
      - container_net
    ports:
      - "9117:9117"
    hostname: "jackett"

  # Workaround to bypass cloudflare blocking jackett requests
  flaresolverr:
    image: flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    environment:
      - LOG_LEVEL=info
      - TZ=${TZ}
    networks:
      - container_net
    ports:
      - 8191:8191
    restart: unless-stopped

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:latest
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONTAINER_CONFIGS}/sonarr:/config
      - ${MEDIA}:/data
    networks:
      - container_net
    ports:
      - "7979:8989"
    hostname: "sonarr"

  radarr:
    container_name: radarr
    image: linuxserver/radarr:latest
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONTAINER_CONFIGS}/radarr:/config
      - ${MEDIA}:/data
    networks:
      - container_net
    ports:
      - "3421:7878"
    hostname: "radarr"

  lazylibrarian:
    image: lscr.io/linuxserver/lazylibrarian:latest
    container_name: lazylibrarian
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DOCKER_MODS=linuxserver/mods:universal-calibre|linuxserver/mods:lazylibrarian-ffmpeg
    volumes:
      - ${CONTAINER_CONFIGS}/lazylibrarian:/config
      - ${MEDIA_DOWNLOADS}/lazylibrarian:/downloads
      - ${MEDIA}/Books:/books
    networks:
      - container_net
    ports:
      - 5299:5299
    restart: unless-stopped

  # Requests Manager
  ombi:
    image: lscr.io/linuxserver/ombi:latest
    container_name: ombi
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${CONTAINER_CONFIGS}/ombi:/config
    networks:
      - container_net
    ports:
      - 3579:3579
    hostname: "ombi"
    restart: unless-stopped

  # Subtitle downloader
  bazarr:
    container_name: bazarr
    image: linuxserver/bazarr:latest
    restart: unless-stopped
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - UMASK_SET=022
    volumes:
      - ${CONTAINER_CONFIGS}/bazarr:/config
      - ${MEDIA_MOVIES}:/movies
      - ${MEDIA_TV}:/tv
    networks:
      - container_net
    ports:
      - "6767:6767"
    hostname: "bazarr"

  rdtclient:
    image: rogerfar/rdtclient:latest
    container_name: rdtclient
    volumes:
      - ${MEDIA_DOWNLOADS}/rdtclient:/data/downloads
      - ${CONTAINER_CONFIGS}/rdtclient:/data/db
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    networks:
      - container_net
    ports:
        - "6500:6500"
    hostname: "rdtclient"
    restart: unless-stopped
    logging:
        driver: json-file
        options:
            max-size: 10m

  # Download manager
  aria2:
    image: hurlenko/aria2-ariang
    container_name: aria2
    volumes:
      - ${MEDIA}:/aria2/data
      - ${MEDIA_DOWNLOADS}/aria2:/data/downloads
      - ${CONTAINER_CONFIGS}/aria2:/aria2/conf
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - ARIA2RPCPORT=443 # the port used for remote procedure calls for starting/stopping downloads detailed decription from docs follows
      # The port that will be used for rpc calls to aria2. Usually you want to set it to the port your website is running on. For example if
      # your AriaNg instance is accessible on https://ariang.mysite.com you need to set ARIA2RPCPORT to 443 (default https port), otherwise
      # AriaNg won't be able to access aria2 rpc running on the default port 8080. You can set the port in the web ui by going to AriaNg
      # Settings > Rpc tab > Aria2 RPC Address field, and changing the default rpc port to whatever you need, but this has to be done per browser.
      - EMBED_RPC_SECRET=true # embeds the rpc secret into the webui. Not secure, so requires the auth to be configured below
      - BASIC_AUTH_USERNAME=${ARIA2_USERNAME}
      - BASIC_AUTH_PASSWORD=${ARIA2_PSSWD}
    networks:
      - container_net
    ports:
      - 443:8080 # the port used for the webUI
    hostname: "aria2"
    restart: always

  # Torrent Client
  deluge:
    image: lscr.io/linuxserver/deluge:latest
    container_name: deluge
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - DELUGE_LOGLEVEL=error
    volumes:
      - ${CONTAINER_CONFIGS}/deluge:/config
      - ${MEDIA_DOWNLOADS}:/downloads
    networks:
      - container_net
    ports:
      - 8112:8112 # webui
      - 6881:6881 # inbound torrent traffic
      - 6881:6881/udp # inbound torrent traffic
      - 58846:58846 # Default deluged port for thin client connectivity
    restart: unless-stopped

  # Used to update cloudflare when public ip changes
  cloudflare-ddns:
    container_name: cloudflare-ddns
    image: oznu/cloudflare-ddns:latest
    restart: always
    environment:
      - API_KEY=eE12oCteHLBV2P5SdaUX3nTG-IL_UQWryHVp3wbQ
      - ZONE=turbodiesel.space
      - PROXIED=true

  # Web server and reverse proxy with automatic SSL cert renewal
  swag:
    image: lscr.io/linuxserver/swag:latest
    container_name: swag
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - URL=${DOMAIN}
      - SUBDOMAINS=wildcard
      - VALIDATION=dns
      - DNSPLUGIN=cloudflare
    volumes:
      - ${CONTAINER_CONFIGS}/swag:/config
    networks:
      - container_net
    ports:
      - 344:443
      - 808:80
    hostname: swag
    restart: unless-stopped

  # Update manager. Pulls latest container images
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_REVIVE_STOPPED=true
      - WATCHTOWER_POLL_INTERVAL=3600
    networks:
      - container_net

  # VS Code Server
  code-server:
    image: lscr.io/linuxserver/code-server:latest
    container_name: code-server
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - PASSWORD=${CODE_WEB_PASSWORD}
      - SUDO_PASSWORD=${CODE_SUDO_PASSWORD}
      # - PROXY_DOMAIN=code-server.my.domain #optional
      - DEFAULT_WORKSPACE=${DOCUMENTS}
    volumes:
      - ${CONTAINER_CONFIGS}/codeserver:/config
    ports:
      - 8443:8443
    restart: unless-stopped

  # TODO: Fix the storage volume so that files are directly accessible
  nextcloud:
    image: nextcloud:latest
    container_name: nextcloud
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - MYSQL_PASSWORD=${PSSWD} # database password
      - MYSQL_DATABASE=nextcloud # database name
      - MYSQL_USER=nextcloud # database username
      - MYSQL_HOST=mariadb # Hostname of the database
    volumes:
      - nextcloud:/var/www/html
      # TODO: copy the data according to https://help.nextcloud.com/t/howto-change-move-data-directory-after-installation/17170
      - nextcloud_contents:/data_clone
    links:
      - database:mariadb
    ports:
      - 8080:80
    networks:
      - container_net
    hostname: nextcloud
    restart: always

  database:
    image: mariadb:latest
    container_name: mariadb
    restart: always
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    volumes:
      - database:/var/lib/mysql
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - MYSQL_ROOT_PASSWORD=${ROOT_PSSWD} # used for root user
      - MYSQL_USER=nextcloud # Username for nextcloud
      - MYSQL_PASSWORD=${PSSWD} # Password for nextcloud user
      - MYSQL_DATABASE=nextcloud # name of database
    networks:
      - container_net
    hostname: mariadb

volumes:
  database:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CONTAINER_CONFIGS}/mariadb
  nextcloud:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CONTAINER_CONFIGS}/nextcloud
  nextcloud_contents:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${NEXTCLOUD_DATA}

networks:
  container_net:

# TODO
  # ldap-auth:
  #   image: lscr.io/linuxserver/ldap-auth
  #   container_name: ldap-auth
  #   environment:
  #     - TZ=${TZ}
  #     - CERTFILE= /keystore/fullchain.pem
  #     - KEYFILE= /keystore/privkey.pem
  #   volumes:
  #     - ${CONTAINER_CONFIGS}/Swag/keys/letsencrypt:/keystore
  #   networks:
  #     - container_net
  #   ports:
  #     - 8888:8888
  #     - 9000:9000
  #   restart: unless-stopped

# TODO
  # authelia:
  #   image: authelia/authelia
  #   container_name: authelia
  #   volumes:
  #     - ${CONTAINER_CONFIGS}/Authelia:/config
  #   networks:
  #     - container_net
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #   expose:
  #     - 9091
  #   restart: unless-stopped
  #   healthcheck:
  #     disable: true
  #   environment:
  #     - TZ=Australia/Melbourne

# TODO: add Prometheus and Grafana for metrics and monitoring
